!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLACK	inc/constants.h	/^# define BLACK /;"	d
BLACK	lib/libft/myfunc/color.h	/^# define BLACK	/;"	d
BLUE	lib/libft/myfunc/color.h	/^# define BLUE	/;"	d
BUFFER_SIZE	lib/libft/gnl/get_next_line.h	/^# define BUFFER_SIZE /;"	d
B_OBJS	lib/libft/Makefile	/^B_OBJS	= $(B_SRCS:.c=.o)$/;"	m
B_SRC	lib/libft/Makefile	/^B_SRC	=	ft_lstnew_bonus.c ft_lstadd_front_bonus.c ft_lstsize_bonus.c\\$/;"	m
B_SRCS	lib/libft/Makefile	/^B_SRCS	= $(addprefix $(SRCDIR), $(B_SRC))$/;"	m
CC	lib/libft/Makefile	/^CC		=	gcc$/;"	m
CC	lib/minilibx-linux/Makefile.mk	/^	CC = clang$/;"	m
CC	lib/minilibx-linux/Makefile.mk	/^CC	= gcc$/;"	m
CC	lib/minilibx-linux/test/Makefile.mk	/^	CC	= gcc$/;"	m
CC	lib/minilibx-linux/test/Makefile.mk	/^	CC = clang$/;"	m
CFLAGS	Makefile	/^CFLAGS		=	-Wall -Wextra -Werror -g$/;"	m
CFLAGS	lib/libft/Makefile	/^CFLAGS	=	-Wall -Wextra -Werror$/;"	m
CFLAGS	lib/minilibx-linux/Makefile.mk	/^CFLAGS	= -O3 -I$(INC)$/;"	m
CFLAGS	lib/minilibx-linux/test/Makefile.mk	/^CFLAGS= -I$(INC) -O3 -I.. -g$/;"	m
CLST_H	lib/libft/myfunc/clst.h	/^# define CLST_H$/;"	d
COLOR_H	lib/libft/myfunc/color.h	/^# define COLOR_H$/;"	d
CONSTANTS_H	inc/constants.h	/^# define CONSTANTS_H$/;"	d
CYAN	lib/libft/myfunc/color.h	/^# define CYAN	/;"	d
DICT_H	lib/libft/myfunc/dict.h	/^# define DICT_H$/;"	d
DPS	Makefile	/^DPS			=	$(SRCS:.o=.d)$/;"	m
END	lib/libft/myfunc/color.h	/^# define END	/;"	d
ENV_DISPLAY	lib/minilibx-linux/mlx_int.h	/^# define ENV_DISPLAY /;"	d
ERR_NO_TRUECOLOR	lib/minilibx-linux/mlx_int.h	/^# define ERR_NO_TRUECOLOR /;"	d
GET_NEXT_LINE_H	lib/libft/gnl/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GRAY	inc/constants.h	/^# define GRAY /;"	d
GREEN	lib/libft/myfunc/color.h	/^# define GREEN	/;"	d
G_OBJS	lib/libft/Makefile	/^G_OBJS	= $(G_SRCS:.c=.o)$/;"	m
G_SRCS	lib/libft/Makefile	/^G_SRCS	= gnl\/get_next_line_before.c gnl\/get_next_line_utils.c$/;"	m
IM1_SX	lib/minilibx-linux/test/main.c	/^#define	IM1_SX	/;"	d	file:
IM1_SY	lib/minilibx-linux/test/main.c	/^#define	IM1_SY	/;"	d	file:
IM3_SX	lib/minilibx-linux/test/main.c	/^#define	IM3_SX	/;"	d	file:
IM3_SY	lib/minilibx-linux/test/main.c	/^#define	IM3_SY	/;"	d	file:
INC	lib/minilibx-linux/Makefile.mk	/^INC	=%%%%$/;"	m
INC	lib/minilibx-linux/test/Makefile.mk	/^INC=%%%%$/;"	m
INCLIB	lib/minilibx-linux/test/Makefile.mk	/^INCLIB=$(INC)\/..\/lib$/;"	m
INCLUDES	Makefile	/^INCLUDES	=	-I.\/inc -I.\/$(MLX_DIR) -I$(LIBFT_DIR)$/;"	m
KEY_A	inc/constants.h	/^# define KEY_A /;"	d
KEY_D	inc/constants.h	/^# define KEY_D /;"	d
KEY_ESC	inc/constants.h	/^# define KEY_ESC /;"	d
KEY_LEFT	inc/constants.h	/^# define KEY_LEFT /;"	d
KEY_PRESS	inc/constants.h	/^# define KEY_PRESS /;"	d
KEY_PRESS_MASK	inc/constants.h	/^# define KEY_PRESS_MASK /;"	d
KEY_RELEASE	inc/constants.h	/^# define KEY_RELEASE /;"	d
KEY_RELEASE_MASK	inc/constants.h	/^# define KEY_RELEASE_MASK /;"	d
KEY_RIGHT	inc/constants.h	/^# define KEY_RIGHT /;"	d
KEY_S	inc/constants.h	/^# define KEY_S /;"	d
KEY_W	inc/constants.h	/^# define KEY_W /;"	d
KOGETYA	inc/constants.h	/^# define KOGETYA /;"	d
LFLAGS	lib/minilibx-linux/test/Makefile.mk	/^LFLAGS = -L.. -lmlx -L$(INCLIB) -lXext -lX11 -lm$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR	=	lib\/libft$/;"	m
LIBFT_H	lib/libft/subject/libft.h	/^# define LIBFT_H$/;"	d
LIBS	Makefile	/^LIBS 		=	-L$(LIBFT_DIR) -lft$/;"	m
LIGHTGRAY	inc/constants.h	/^# define LIGHTGRAY /;"	d
LOCALHOST	lib/minilibx-linux/mlx_int.h	/^# define LOCALHOST /;"	d
MAGENTA	lib/libft/myfunc/color.h	/^# define MAGENTA	/;"	d
MAP_NUM_COLS	inc/constants.h	/^# define MAP_NUM_COLS /;"	d
MAP_NUM_ROWS	inc/constants.h	/^# define MAP_NUM_ROWS /;"	d
MINIMAP_H	inc/minimap.h	/^#define MINIMAP_H$/;"	d
MINIMAP_SCALE	inc/constants.h	/^# define MINIMAP_SCALE /;"	d
MLX_DIR	Makefile	/^MLX_DIR		=	lib\/minilibx-linux$/;"	m
MLX_H	lib/minilibx-linux/mlx.h	/^#define	MLX_H$/;"	d
MLX_INT_H	lib/minilibx-linux/mlx_int.h	/^# define MLX_INT_H$/;"	d
MLX_MAX_EVENT	lib/minilibx-linux/mlx_int.h	/^# define MLX_MAX_EVENT /;"	d
MLX_TYPE_SHM	lib/minilibx-linux/mlx_int.h	/^# define MLX_TYPE_SHM /;"	d
MLX_TYPE_SHM_PIXMAP	lib/minilibx-linux/mlx_int.h	/^# define MLX_TYPE_SHM_PIXMAP /;"	d
MLX_TYPE_XIMAGE	lib/minilibx-linux/mlx_int.h	/^# define MLX_TYPE_XIMAGE /;"	d
MYFUNC_H	lib/libft/myfunc/myfunc.h	/^# define MYFUNC_H$/;"	d
MYLIBFT_H	lib/libft/mylibft.h	/^# define MYLIBFT_H$/;"	d
M_OBJS	lib/libft/Makefile	/^M_OBJS	= $(M_SRCS:.c=.o)$/;"	m
M_SRC	lib/libft/Makefile	/^M_SRC	=	clst_addback.c\\$/;"	m
M_SRCDIR	lib/libft/Makefile	/^M_SRCDIR=  myfunc\/$/;"	m
M_SRCS	lib/libft/Makefile	/^M_SRCS	= $(addprefix $(M_SRCDIR), $(M_SRC))$/;"	m
NAME	Makefile	/^NAME		=	cub3D$/;"	m
NAME	lib/libft/Makefile	/^NAME	=	libft.a$/;"	m
NAME	lib/minilibx-linux/Makefile.mk	/^NAME		= libmlx.a$/;"	m
NAME	lib/minilibx-linux/test/Makefile.mk	/^NAME= mlx-test$/;"	m
NAME_UNAME	lib/minilibx-linux/Makefile.mk	/^NAME_UNAME	= libmlx_$(UNAME).a$/;"	m
NUM_RAYS	inc/constants.h	/^# define NUM_RAYS /;"	d
OBJ	lib/minilibx-linux/Makefile.mk	/^OBJ	= $(addprefix $(OBJ_DIR)\/,$(SRC:%.c=%.o))$/;"	m
OBJ	lib/minilibx-linux/test/Makefile.mk	/^OBJ = $(SRC:%.c=%.o)$/;"	m
OBJDIR	Makefile	/^OBJDIR		=	.\/obj$/;"	m
OBJS	Makefile	/^OBJS		=	$(addprefix $(OBJDIR)\/, $(notdir $(SRCS:.c=.o)))$/;"	m
OBJS	lib/libft/Makefile	/^OBJS	= $(SRCS:.c=.o)$/;"	m
OBJ_DIR	lib/minilibx-linux/Makefile.mk	/^OBJ_DIR = obj$/;"	m
OFFWHITE	inc/constants.h	/^# define OFFWHITE /;"	d
ORANGE	inc/constants.h	/^# define ORANGE /;"	d
PLAYER_RADIUS	inc/constants.h	/^# define PLAYER_RADIUS /;"	d
RED	inc/constants.h	/^# define RED /;"	d
RED	lib/libft/myfunc/color.h	/^# define RED	/;"	d
RESET	lib/libft/myfunc/color.h	/^# define RESET	/;"	d
RETURN	lib/minilibx-linux/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
SKYBLUE	inc/constants.h	/^# define SKYBLUE /;"	d
SRC	lib/libft/Makefile	/^SRC		=	ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c\\$/;"	m
SRC	lib/minilibx-linux/Makefile.mk	/^SRC	= mlx_init.c mlx_new_window.c mlx_pixel_put.c mlx_loop.c \\$/;"	m
SRC	lib/minilibx-linux/test/Makefile.mk	/^SRC = main.c$/;"	m
SRCDIR	lib/libft/Makefile	/^SRCDIR	= subject\/$/;"	m
SRCS	Makefile	/^SRCS		=	main.c\\$/;"	m
SRCS	lib/libft/Makefile	/^SRCS	= $(addprefix $(SRCDIR), $(SRC))$/;"	m
TILE_SIZE	inc/constants.h	/^# define TILE_SIZE /;"	d
UNAME	Makefile	/^UNAME := $(shell uname)$/;"	m
UNAME	lib/minilibx-linux/Makefile.mk	/^UNAME = $(shell uname)$/;"	m
UNAME	lib/minilibx-linux/test/Makefile.mk	/^UNAME := $(shell uname)$/;"	m
VPATH	Makefile	/^VPATH		=	src:src\/raycast:src\/render$/;"	m
WALK_SPEED	inc/constants.h	/^# define WALK_SPEED /;"	d
WARN_SHM_ATTACH	lib/minilibx-linux/mlx_int.h	/^# define WARN_SHM_ATTACH /;"	d
WIN1_SX	lib/minilibx-linux/test/main.c	/^#define	WIN1_SX	/;"	d	file:
WIN1_SY	lib/minilibx-linux/test/main.c	/^#define	WIN1_SY	/;"	d	file:
WINDOW_HEIGHT	inc/constants.h	/^# define WINDOW_HEIGHT /;"	d
WINDOW_NAME	inc/constants.h	/^# define WINDOW_NAME /;"	d
WINDOW_WIDTH	inc/constants.h	/^# define WINDOW_WIDTH /;"	d
X_ShmAttach	lib/minilibx-linux/mlx_new_image.c	/^#define	X_ShmAttach	/;"	d	file:
YELLOW	inc/constants.h	/^# define YELLOW /;"	d
YELLOW	lib/libft/myfunc/color.h	/^# define YELLOW	/;"	d
add_shade	src/render/render_3d_wall.c	/^static int	add_shade(int color, double scale)$/;"	f	file:
addr	inc/minimap.h	/^  char *addr;$/;"	m	struct:s_img
angle	inc/minimap.h	/^  double angle;$/;"	m	struct:s_ray
at_exit	lib/minilibx-linux/test/run_tests.sh	/^at_exit() {$/;"	f
bits_per_pixel	inc/minimap.h	/^  int bits_per_pixel;$/;"	m	struct:s_img
bpp	lib/minilibx-linux/mlx_int.h	/^	int				bpp;$/;"	m	struct:s_img
bpp1	lib/minilibx-linux/test/main.c	/^int	bpp1;$/;"	v
bpp2	lib/minilibx-linux/test/main.c	/^int	bpp2;$/;"	v
bpp3	lib/minilibx-linux/test/main.c	/^int	bpp3;$/;"	v
bpp4	lib/minilibx-linux/test/main.c	/^int	bpp4;$/;"	v
cast_all_rays	src/raycast/cast_all_rays.c	/^void cast_all_rays(t_ray *ray, t_player *player, t_map *map) {$/;"	f
cast_ray	src/raycast/cast_all_rays.c	/^static void cast_ray(t_ray *ray, double ray_angle, t_player *player,$/;"	f	file:
change_atoi	lib/libft/subject/ft_atoi.c	/^static long	change_atoi(const char *nptr, int sign)$/;"	f	file:
char_malloc	lib/libft/myfunc/ft_xsplit.c	/^static char	*char_malloc(char const *src, char c, size_t i)$/;"	f	file:
char_malloc	lib/libft/subject/ft_split.c	/^static char	*char_malloc(char const *src, char c, size_t i)$/;"	f	file:
check_set	lib/libft/subject/ft_strtrim.c	/^static int	check_set(char const c, char const *list)$/;"	f	file:
check_strs	lib/libft/gnl/get_next_line_before.c	/^static int	check_strs(ssize_t cnt, char **line, char **left, char *buf)$/;"	f	file:
clean	lib/minilibx-linux/configure	/^clean(){$/;"	f
clear_set	lib/libft/myfunc/to_vector.c	/^static void	*clear_set(t_list **lst, char *str)$/;"	f	file:
clst_addback	lib/libft/myfunc/clst_addback.c	/^void	clst_addback(t_clst *head, t_clst *new)$/;"	f
clst_addfront	lib/libft/myfunc/clst_addfront.c	/^void	clst_addfront(t_clst *head, t_clst *new)$/;"	f
clst_clear	lib/libft/myfunc/clst_clear.c	/^void	clst_clear(t_clst *head)$/;"	f
clst_count	lib/libft/myfunc/clst_count.c	/^size_t	clst_count(t_clst *clst)$/;"	f
clst_del_content	lib/libft/myfunc/clst_del_content.c	/^void	clst_del_content(t_clst *path_clst, char *del_content)$/;"	f
clst_delone	lib/libft/myfunc/clst_delone.c	/^bool	clst_delone(t_clst *elem)$/;"	f
clst_insert	lib/libft/myfunc/clst_insert.c	/^void	clst_insert(t_clst *lst, t_clst *new)$/;"	f
clst_link	lib/libft/myfunc/clst_link.c	/^void	clst_link(t_clst *now, t_clst *next)$/;"	f
clst_new	lib/libft/myfunc/clst_new.c	/^t_clst	*clst_new(char *content)$/;"	f
cmap	lib/minilibx-linux/mlx_int.h	/^	Colormap	cmap;$/;"	m	struct:s_xvar
col	lib/minilibx-linux/mlx_int.h	/^	int		col;$/;"	m	struct:s_xpm_col
color	lib/minilibx-linux/mlx_int.h	/^	int		color;$/;"	m	struct:s_col_name
color_map_1	lib/minilibx-linux/test/main.c	/^int	color_map_1(void *win,int w,int h)$/;"	f
color_map_2	lib/minilibx-linux/test/main.c	/^int	color_map_2(unsigned char *data,int bpp,int sl,int w,int h,int endian, int type)$/;"	f
content	lib/libft/myfunc/clst.h	/^	char			*content;$/;"	m	struct:s_clst
content	lib/libft/subject/libft.h	/^	void			*content;$/;"	m	struct:s_list
data	lib/minilibx-linux/mlx_int.h	/^	char			*data;$/;"	m	struct:s_img
data1	lib/minilibx-linux/test/main.c	/^char	*data1;$/;"	v
data2	lib/minilibx-linux/test/main.c	/^char	*data2;$/;"	v
data3	lib/minilibx-linux/test/main.c	/^char	*data3;$/;"	v
data4	lib/minilibx-linux/test/main.c	/^char	*data4;$/;"	v
decrgb	lib/minilibx-linux/mlx_int.h	/^	int			decrgb[6];$/;"	m	struct:s_xvar
depth	lib/minilibx-linux/mlx_int.h	/^	int			depth;$/;"	m	struct:s_xvar
dict_addback	lib/libft/myfunc/dict_addback.c	/^bool	dict_addback(t_dict *head, t_dict *new)$/;"	f
dict_clear	lib/libft/myfunc/dict_clear.c	/^void	dict_clear(t_dict *head)$/;"	f
dict_delone	lib/libft/myfunc/dict_delone.c	/^bool	dict_delone(t_dict *elem)$/;"	f
dict_get_value	lib/libft/myfunc/dict_get_value.c	/^char	*dict_get_value(const char *key, t_dict *head)$/;"	f
dict_new	lib/libft/myfunc/dict_new.c	/^t_dict	*dict_new(char *key, char *value)$/;"	f
dict_search_item	lib/libft/myfunc/dict_search_item.c	/^t_dict	*dict_search_item(char *key, t_dict *dict)$/;"	f
dict_size	lib/libft/myfunc/dict_size.c	/^size_t	dict_size(t_dict *head)$/;"	f
dict_store_item	lib/libft/myfunc/dict_store_item.c	/^t_dict	*dict_store_item(char *expression, char sep)$/;"	f
dict_substr_key	lib/libft/myfunc/dict_substr_key.c	/^char	*dict_substr_key(char *expression, char *connector)$/;"	f
dict_substr_value	lib/libft/myfunc/dict_substr_value.c	/^char	*dict_substr_value(char *expression, char *connector)$/;"	f
dict_to_array	lib/libft/myfunc/dict_to_array.c	/^char	**dict_to_array(t_dict *dict_head, char *connector)$/;"	f
dict_update_value	lib/libft/myfunc/dict_update_value.c	/^void	dict_update_value(char *key, char *new_value, t_dict *dict)$/;"	f
dict_xstore_item	lib/libft/myfunc/dict_xstore_item.c	/^t_dict	*dict_xstore_item(char *expression, char *connector)$/;"	f
display	lib/minilibx-linux/mlx_int.h	/^	Display		*display;$/;"	m	struct:s_xvar
distance	inc/minimap.h	/^  double distance;$/;"	m	struct:s_ray
do_flush	lib/minilibx-linux/mlx_int.h	/^	int			do_flush;$/;"	m	struct:s_xvar
end_loop	lib/minilibx-linux/mlx_int.h	/^	int 		end_loop;$/;"	m	struct:s_xvar
endian	inc/minimap.h	/^  int endian;$/;"	m	struct:s_img
endian1	lib/minilibx-linux/test/main.c	/^int	endian1;$/;"	v
endian2	lib/minilibx-linux/test/main.c	/^int	endian2;$/;"	v
endian3	lib/minilibx-linux/test/main.c	/^int	endian3;$/;"	v
endian4	lib/minilibx-linux/test/main.c	/^int	endian4;$/;"	v
expose_hook	lib/minilibx-linux/mlx_int.h	/^	int					(*expose_hook)();$/;"	m	struct:s_win_list
expose_param	lib/minilibx-linux/mlx_int.h	/^	void				*expose_param;$/;"	m	struct:s_win_list
expose_win1	lib/minilibx-linux/test/main.c	/^int	expose_win1(void *p)$/;"	f
expose_win2	lib/minilibx-linux/test/main.c	/^int	expose_win2(void *p)$/;"	f
find_closest_intersection	src/raycast/find_horizontal_intersection.c	/^static t_point	find_closest_intersection(const t_ray *ray,$/;"	f	file:
find_closest_intersection	src/raycast/find_vertical_intersection.c	/^static t_point find_closest_intersection(t_ray *ray, t_point *player_pos)$/;"	f	file:
find_horizontal_intersection	src/raycast/find_horizontal_intersection.c	/^t_point	find_horizontal_intersection(const t_ray *ray, const t_point *player_pos,$/;"	f
find_intersection_with_wall	src/raycast/find_vertical_intersection.c	/^static t_point find_intersection_with_wall(t_ray *ray, t_map *map,$/;"	f	file:
find_vertical_intersection	src/raycast/find_vertical_intersection.c	/^t_point find_vertical_intersection(t_ray *ray, t_point *player_pos, t_map *map)$/;"	f
find_wall_hit	src/raycast/find_horizontal_intersection.c	/^static t_point	find_wall_hit(const t_ray *ray, const t_map *map,$/;"	f	file:
format	lib/minilibx-linux/mlx_int.h	/^	int				format;$/;"	m	struct:s_img
fov_angle	inc/minimap.h	/^  double fov_angle;$/;"	m	struct:s_player
free_all	lib/libft/myfunc/ft_xsplit.c	/^static void	*free_all(char **dest, size_t i)$/;"	f	file:
free_all	lib/libft/subject/ft_split.c	/^static void	*free_all(char **dest, size_t i)$/;"	f	file:
free_set	lib/libft/gnl/get_next_line_utils.c	/^void	*free_set(char **ptr1, char *ptr2)$/;"	f
free_vector	lib/libft/myfunc/free_vector.c	/^void	free_vector(char **vector)$/;"	f
ft_atoi	lib/libft/subject/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_bzero	lib/libft/subject/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	lib/libft/subject/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_isalnum	lib/libft/subject/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	lib/libft/subject/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	lib/libft/subject/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	lib/libft/subject/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	lib/libft/subject/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	lib/libft/myfunc/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f
ft_itoa	lib/libft/subject/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	lib/libft/subject/ft_lstadd_back_bonus.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	lib/libft/subject/ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	lib/libft/subject/ft_lstclear_bonus.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	lib/libft/subject/ft_lstdelone_bonus.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	lib/libft/subject/ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	lib/libft/subject/ft_lstlast_bonus.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	lib/libft/subject/ft_lstmap_bonus.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	lib/libft/subject/ft_lstnew_bonus.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	lib/libft/subject/ft_lstsize_bonus.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_lstsize_sizet	lib/libft/myfunc/ft_lstsize_sizet.c	/^size_t	ft_lstsize_sizet(t_list *lst)$/;"	f
ft_memchr	lib/libft/subject/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	lib/libft/subject/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	lib/libft/subject/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	lib/libft/subject/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	lib/libft/subject/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_putchar_fd	lib/libft/subject/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	lib/libft/subject/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	lib/libft/subject/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	lib/libft/subject/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	lib/libft/subject/ft_split.c	/^char	**ft_split(char const *str, char c)$/;"	f
ft_strajoin	lib/libft/myfunc/ft_strajoin.c	/^char	*ft_strajoin(char **str, char *connector)$/;"	f
ft_strchr	lib/libft/subject/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f
ft_strclen	lib/libft/myfunc/ft_strclen.c	/^size_t	ft_strclen(const char *str, int c)$/;"	f
ft_strclen_array	lib/libft/myfunc/ft_strclen.c	/^size_t	ft_strclen_array(const char *str, char *sep)$/;"	f
ft_strcmp	lib/libft/myfunc/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strdup	lib/libft/subject/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	lib/libft/subject/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	lib/libft/subject/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin3	lib/libft/myfunc/ft_strjoin3.c	/^char	*ft_strjoin3(const char *s1, const char *s2, const char *s3)$/;"	f
ft_strlcat	lib/libft/subject/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f
ft_strlcpy	lib/libft/subject/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	lib/libft/subject/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	lib/libft/subject/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	lib/libft/subject/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strndup	lib/libft/myfunc/ft_strndup.c	/^char	*ft_strndup(const char *s1, size_t n)$/;"	f
ft_strnstr	lib/libft/subject/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	lib/libft/subject/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int c)$/;"	f
ft_strtrim	lib/libft/subject/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	lib/libft/subject/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	lib/libft/subject/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	lib/libft/subject/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_trijoin	lib/libft/myfunc/ft_trijoin.c	/^char	*ft_trijoin(char const *s1, char const *s2, char const *s3)$/;"	f
ft_ulongtoa_base	lib/libft/myfunc/ft_ulongtoa_base.c	/^char	*ft_ulongtoa_base(unsigned long nbr, char *base)$/;"	f
ft_v_strchr	lib/libft/myfunc/ft_v_strchr.c	/^int	ft_v_strchr(const char *str, int c)$/;"	f
ft_xcalloc	lib/libft/myfunc/ft_xcalloc.c	/^void	*ft_xcalloc(size_t nmemb, size_t size)$/;"	f
ft_xitoa	lib/libft/myfunc/ft_xitoa.c	/^char	*ft_xitoa(int n)$/;"	f
ft_xlstnew	lib/libft/myfunc/ft_xlstnew_bonus.c	/^t_list	*ft_xlstnew(void *content)$/;"	f
ft_xsplit	lib/libft/myfunc/ft_xsplit.c	/^char	**ft_xsplit(char const *str, char c)$/;"	f
ft_xstrajoin	lib/libft/myfunc/ft_xstrajoin.c	/^char	*ft_xstrajoin(char **str, char *connector)$/;"	f
ft_xstrdup	lib/libft/myfunc/ft_xstrdup.c	/^char	*ft_xstrdup(const char *s1)$/;"	f
ft_xstrjoin	lib/libft/myfunc/ft_xstrjoin.c	/^char	*ft_xstrjoin(char const *s1, char const *s2)$/;"	f
ft_xstrjoin3	lib/libft/myfunc/ft_xstrjoin3.c	/^char	*ft_xstrjoin3(const char *s1, const char *s2, const char *s3)$/;"	f
ft_xstrmapi	lib/libft/myfunc/ft_xstrmapi.c	/^char	*ft_xstrmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_xstrndup	lib/libft/myfunc/ft_xstrndup.c	/^char	*ft_xstrndup(const char *s1, size_t n)$/;"	f
ft_xsubstr	lib/libft/myfunc/ft_xsubstr.c	/^char	*ft_xsubstr(char const *s, unsigned int start, size_t len)$/;"	f
ft_xtrijoin	lib/libft/myfunc/ft_xtrijoin.c	/^char	*ft_xtrijoin(char const *s1, char const *s2, char const *s3)$/;"	f
ft_xulongtoa_base	lib/libft/myfunc/ft_xulongtoa_base.c	/^char	*ft_xulongtoa_base(unsigned long nbr, char *base)$/;"	f
g_map	src/init.c	/^char *g_map[MAP_NUM_ROWS + 1] = {"11111111111111111111", "10000000000000000001",$/;"	v
gc	lib/minilibx-linux/mlx_int.h	/^	GC					gc;$/;"	m	struct:s_win_list
gc	lib/minilibx-linux/mlx_int.h	/^	GC				gc;$/;"	m	struct:s_img
gere_mouse	lib/minilibx-linux/test/new_win.c	/^int gere_mouse(int x,int y,int button,void*toto)$/;"	f
get_distance	src/raycast/set_closer_intersection.c	/^static double	get_distance(const t_point *p1, const t_point *p2)$/;"	f	file:
get_int	lib/libft/subject/ft_atoi.c	/^static long	get_int(char c)$/;"	f	file:
get_len_int	lib/libft/myfunc/ft_xitoa.c	/^static long	get_len_int(long l_nbr)$/;"	f	file:
get_len_int	lib/libft/subject/ft_itoa.c	/^static long	get_len_int(long l_nbr)$/;"	f	file:
get_len_trimmed	lib/libft/subject/ft_strtrim.c	/^static size_t	get_len_trimmed(char const *str, char const *set)$/;"	f	file:
get_length	lib/libft/myfunc/ft_ulongtoa_base.c	/^static int	get_length(unsigned long nbr, unsigned long base_num)$/;"	f	file:
get_length	lib/libft/myfunc/ft_xulongtoa_base.c	/^static int	get_length(unsigned long nbr, unsigned long base_num)$/;"	f	file:
get_next_line	lib/libft/gnl/get_next_line_before.c	/^int	get_next_line(int fd, char **line)$/;"	f
get_strip_color	src/render/render_3d_wall.c	/^static int	get_strip_color(double ray_distance, bool was_hit_vertical)$/;"	f	file:
get_xlib_include_path	lib/minilibx-linux/configure	/^get_xlib_include_path(){$/;"	f
get_xstep	src/raycast/find_horizontal_intersection.c	/^static double	get_xstep(const t_ray *ray)$/;"	f	file:
get_xstep	src/raycast/find_vertical_intersection.c	/^static double get_xstep(t_ray *ray)$/;"	f	file:
get_ystep	src/raycast/find_horizontal_intersection.c	/^static double	get_ystep(const t_ray *ray)$/;"	f	file:
get_ystep	src/raycast/find_vertical_intersection.c	/^static double get_ystep(t_ray *ray)$/;"	f	file:
gnl_strchr	lib/libft/gnl/get_next_line_utils.c	/^char	*gnl_strchr(const char *str, int c)$/;"	f
gnl_strdup	lib/libft/gnl/get_next_line_utils.c	/^char	*gnl_strdup(const char *s1)$/;"	f
gnl_strjoin	lib/libft/gnl/get_next_line_utils.c	/^char	*gnl_strjoin(char const *s1, char const *s2)$/;"	f
gnl_strlen	lib/libft/gnl/get_next_line_utils.c	/^size_t	gnl_strlen(const char *str)$/;"	f
height	lib/minilibx-linux/mlx_int.h	/^	int				height;$/;"	m	struct:s_img
hook	lib/minilibx-linux/mlx_int.h	/^	int		(*hook)();$/;"	m	struct:s_event_list
hooks	lib/minilibx-linux/mlx_int.h	/^	t_event_list		hooks[MLX_MAX_EVENT];$/;"	m	struct:s_win_list
im1	lib/minilibx-linux/test/main.c	/^void    *im1;$/;"	v
im2	lib/minilibx-linux/test/main.c	/^void	*im2;$/;"	v
im3	lib/minilibx-linux/test/main.c	/^void	*im3;$/;"	v
im4	lib/minilibx-linux/test/main.c	/^void	*im4;$/;"	v
image	lib/minilibx-linux/mlx_int.h	/^	XImage			*image;$/;"	m	struct:s_img
img_ptr	inc/minimap.h	/^  void *img_ptr;$/;"	m	struct:s_img
init_game	src/init.c	/^void	init_game(t_game *game)$/;"	f
init_image	src/init.c	/^void	init_image(t_img *img, void *mlx_ptr, int width, int height)$/;"	f
init_map	src/init.c	/^static void	init_map(t_map *map, void *mlx_ptr)$/;"	f	file:
init_monocolor_image	src/init.c	/^static void	init_monocolor_image(t_img *img, void *mlx_ptr, int color)$/;"	f	file:
init_player	src/init.c	/^static void	init_player(t_player *player)$/;"	f	file:
init_ray	src/init.c	/^static void	init_ray(t_ray **ray, t_player *player, t_map *map)$/;"	f	file:
is_facing_down	inc/minimap.h	/^  bool is_facing_down;$/;"	m	struct:s_ray
is_facing_left	inc/minimap.h	/^  bool is_facing_left;$/;"	m	struct:s_ray
is_facing_right	inc/minimap.h	/^  bool is_facing_right;$/;"	m	struct:s_ray
is_facing_up	inc/minimap.h	/^  bool is_facing_up;$/;"	m	struct:s_ray
is_move_key	src/process_key_press.c	/^static bool	is_move_key(int keycode)$/;"	f	file:
is_rotate_key	src/process_key_press.c	/^static bool	is_rotate_key(int keycode)$/;"	f	file:
is_wall	src/render/render_map.c	/^static bool	is_wall(char **map, int x, int y)$/;"	f	file:
key	lib/libft/myfunc/dict.h	/^	char			*key;$/;"	m	struct:s_dict
key_hook	lib/minilibx-linux/mlx_int.h	/^	int					(*key_hook)();$/;"	m	struct:s_win_list
key_param	lib/minilibx-linux/mlx_int.h	/^	void				*key_param;$/;"	m	struct:s_win_list
key_press_hook	src/register_hooks.c	/^static int	key_press_hook(int keycode, t_game *game)$/;"	f	file:
key_release_hook	src/register_hooks.c	/^static int	key_release_hook(int keycode, t_game *game)$/;"	f	file:
key_win1	lib/minilibx-linux/test/main.c	/^int	key_win1(int key,void *p)$/;"	f
key_win2	lib/minilibx-linux/test/main.c	/^int	key_win2(int key,void *p)$/;"	f
key_win3	lib/minilibx-linux/test/main.c	/^int	key_win3(int key,void *p)$/;"	f
line_count	lib/libft/myfunc/ft_xsplit.c	/^static size_t	line_count(char const *str, char c)$/;"	f	file:
line_count	lib/libft/subject/ft_split.c	/^static size_t	line_count(char const *str, char c)$/;"	f	file:
local_endian	lib/minilibx-linux/test/main.c	/^int	local_endian;$/;"	v
log_error	lib/minilibx-linux/configure	/^log_error(){$/;"	f
log_error	lib/minilibx-linux/test/run_tests.sh	/^log_error(){$/;"	f
log_info	lib/minilibx-linux/configure	/^log_info(){$/;"	f
log_info	lib/minilibx-linux/test/run_tests.sh	/^log_info(){$/;"	f
logging	lib/minilibx-linux/configure	/^logging(){$/;"	f
logging	lib/minilibx-linux/test/run_tests.sh	/^logging(){$/;"	f
loop_hook	lib/minilibx-linux/mlx_int.h	/^	int			(*loop_hook)();$/;"	m	struct:s_xvar
loop_param	lib/minilibx-linux/mlx_int.h	/^	void		*loop_param;$/;"	m	struct:s_xvar
main	lib/minilibx-linux/test/main.c	/^int	main()$/;"	f
main	lib/minilibx-linux/test/new_win.c	/^int main()$/;"	f
main	lib/minilibx-linux/test/run_tests.sh	/^main(){$/;"	f
main	src/main.c	/^int	main(void)$/;"	f
make_firstnode	lib/libft/myfunc/to_vector.c	/^static int	make_firstnode(char **str, t_list **lst, int fd)$/;"	f	file:
map	inc/minimap.h	/^  char	**map;$/;"	m	struct:s_game
map_has_wall_at	src/update.c	/^bool	map_has_wall_at(double x, double y, char **map)$/;"	f
mask	lib/minilibx-linux/mlx_int.h	/^	int		mask;$/;"	m	struct:s_event_list
mlx	lib/minilibx-linux/test/main.c	/^void	*mlx;$/;"	v
mlx	lib/minilibx-linux/test/new_win.c	/^void *mlx;$/;"	v
mlx_X_error	lib/minilibx-linux/mlx_new_image.c	/^int	mlx_X_error;$/;"	v
mlx_clear_window	lib/minilibx-linux/mlx_clear_window.c	/^int		mlx_clear_window(t_xvar *xvar,t_win_list *win)$/;"	f
mlx_col_name	lib/minilibx-linux/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_destroy_display	lib/minilibx-linux/mlx_destroy_display.c	/^int	mlx_destroy_display(t_xvar *xvar)$/;"	f
mlx_destroy_image	lib/minilibx-linux/mlx_destroy_image.c	/^int	mlx_destroy_image(t_xvar *xvar, t_img *img)$/;"	f
mlx_destroy_window	lib/minilibx-linux/mlx_destroy_window.c	/^int	mlx_destroy_window(t_xvar *xvar,t_win_list *win)$/;"	f
mlx_do_key_autorepeatoff	lib/minilibx-linux/mlx_hook.c	/^int	mlx_do_key_autorepeatoff(t_xvar *xvar)$/;"	f
mlx_do_key_autorepeaton	lib/minilibx-linux/mlx_hook.c	/^int	mlx_do_key_autorepeaton(t_xvar *xvar)$/;"	f
mlx_do_sync	lib/minilibx-linux/mlx_hook.c	/^int	mlx_do_sync(t_xvar *xvar)$/;"	f
mlx_expose_hook	lib/minilibx-linux/mlx_expose_hook.c	/^int		mlx_expose_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_ext_fullscreen	lib/minilibx-linux/mlx_ext_randr.c	/^int			mlx_ext_fullscreen(t_xvar *xvar, t_win_list *win, int fullscreen)$/;"	f
mlx_flush_event	lib/minilibx-linux/mlx_flush_event.c	/^int	mlx_flush_event(t_xvar *xvar)$/;"	f
mlx_get_color_value	lib/minilibx-linux/mlx_get_color_value.c	/^int             mlx_get_color_value(t_xvar *xvar,int color)$/;"	f
mlx_get_data_addr	lib/minilibx-linux/mlx_get_data_addr.c	/^char	*mlx_get_data_addr(t_img *img,int *bits_per_pixel,$/;"	f
mlx_get_screen_size	lib/minilibx-linux/mlx_screen_size.c	/^int		mlx_get_screen_size(void *mlx_ptr, int *sizex, int *sizey)$/;"	f
mlx_hook	lib/minilibx-linux/mlx_hook.c	/^int	mlx_hook(t_win_list *win, int x_event, int x_mask, $/;"	f
mlx_init	lib/minilibx-linux/mlx_init.c	/^void	*mlx_init()$/;"	f
mlx_int_anti_resize_win	lib/minilibx-linux/mlx_int_anti_resize_win.c	/^int	mlx_int_anti_resize_win(t_xvar *xvar,Window win,int w,int h)$/;"	f
mlx_int_deal_shm	lib/minilibx-linux/mlx_init.c	/^int		mlx_int_deal_shm(t_xvar *xvar)$/;"	f
mlx_int_do_nothing	lib/minilibx-linux/mlx_int_do_nothing.c	/^int	mlx_int_do_nothing(void *param)$/;"	f
mlx_int_egal_img	lib/minilibx-linux/mlx_lib_xpm.c	/^int	mlx_int_egal_img(XImage *img1,XImage *img2)$/;"	f
mlx_int_file_get_rid_comment	lib/minilibx-linux/mlx_xpm.c	/^int	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	lib/minilibx-linux/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_good_color	lib/minilibx-linux/mlx_get_color_value.c	/^int		mlx_int_get_good_color(t_xvar *xvar,int color)$/;"	f
mlx_int_get_line	lib/minilibx-linux/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	lib/minilibx-linux/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_get_visual	lib/minilibx-linux/mlx_int_get_visual.c	/^int		mlx_int_get_visual(t_xvar *xvar)$/;"	f
mlx_int_new_image	lib/minilibx-linux/mlx_new_image.c	/^void	*mlx_int_new_image(t_xvar *xvar,int width, int height,int format)$/;"	f
mlx_int_new_xshm_image	lib/minilibx-linux/mlx_new_image.c	/^void	*mlx_int_new_xshm_image(t_xvar *xvar,int width,int height,int format)$/;"	f
mlx_int_param_ButtonPress	lib/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_ButtonPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_ButtonRelease	lib/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_ButtonRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_Expose	lib/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_Expose(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_KeyPress	lib/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_KeyPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_KeyRelease	lib/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_KeyRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_MotionNotify	lib/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_MotionNotify(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_event	lib/minilibx-linux/mlx_int_param_event.c	/^int	(*(mlx_int_param_event[]))() =$/;"	v
mlx_int_param_generic	lib/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_generic(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_undef	lib/minilibx-linux/mlx_int_param_event.c	/^int	mlx_int_param_undef()$/;"	f
mlx_int_parse_xpm	lib/minilibx-linux/mlx_xpm.c	/^void	*mlx_int_parse_xpm(t_xvar *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_rgb_conversion	lib/minilibx-linux/mlx_init.c	/^int		mlx_int_rgb_conversion(t_xvar *xvar)$/;"	f
mlx_int_set_win_event_mask	lib/minilibx-linux/mlx_int_set_win_event_mask.c	/^int	mlx_int_set_win_event_mask(t_xvar *xvar)$/;"	f
mlx_int_static_line	lib/minilibx-linux/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	lib/minilibx-linux/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	lib/minilibx-linux/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	lib/minilibx-linux/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_wait_first_expose	lib/minilibx-linux/mlx_int_wait_first_expose.c	/^int	mlx_int_wait_first_expose(t_xvar *xvar,Window win)$/;"	f
mlx_int_xpm_f_image	lib/minilibx-linux/mlx_lib_xpm.c	/^void		*mlx_int_xpm_f_image(t_xvar *xvar,int *width,int *height,$/;"	f
mlx_int_xpm_set_pixel	lib/minilibx-linux/mlx_xpm.c	/^int	mlx_int_xpm_set_pixel(t_img *img, char *data, int opp, int col, int x)$/;"	f
mlx_key_hook	lib/minilibx-linux/mlx_key_hook.c	/^int		mlx_key_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_loop	lib/minilibx-linux/mlx_loop.c	/^int			mlx_loop(t_xvar *xvar)$/;"	f
mlx_loop_end	lib/minilibx-linux/mlx_loop.c	/^int			mlx_loop_end(t_xvar *xvar)$/;"	f
mlx_loop_hook	lib/minilibx-linux/mlx_loop_hook.c	/^int	mlx_loop_hook(t_xvar *xvar,int (*funct)(),void *param)$/;"	f
mlx_mouse_get_pos	lib/minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_get_pos(t_xvar *xvar, t_win_list *win, \\$/;"	f
mlx_mouse_hide	lib/minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_hide(t_xvar *xvar, t_win_list *win)$/;"	f
mlx_mouse_hook	lib/minilibx-linux/mlx_mouse_hook.c	/^int		mlx_mouse_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_mouse_move	lib/minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_move(t_xvar *xvar, t_win_list *win, int x, int y)$/;"	f
mlx_mouse_show	lib/minilibx-linux/mlx_mouse.c	/^int		mlx_mouse_show(t_xvar *xvar, t_win_list *win)$/;"	f
mlx_new_image	lib/minilibx-linux/mlx_new_image.c	/^void	*mlx_new_image(t_xvar *xvar,int width, int height)$/;"	f
mlx_new_image2	lib/minilibx-linux/mlx_new_image.c	/^void	*mlx_new_image2(t_xvar *xvar,int width, int height)$/;"	f
mlx_new_window	lib/minilibx-linux/mlx_new_window.c	/^void	*mlx_new_window(t_xvar *xvar,int size_x,int size_y,char *title)$/;"	f
mlx_pixel_put	lib/minilibx-linux/mlx_pixel_put.c	/^int		mlx_pixel_put(t_xvar *xvar,t_win_list *win,$/;"	f
mlx_ptr	inc/minimap.h	/^  void *mlx_ptr;$/;"	m	struct:s_game
mlx_put_image_to_window	lib/minilibx-linux/mlx_put_image_to_window.c	/^int	mlx_put_image_to_window(t_xvar *xvar,t_win_list *win,t_img *img,$/;"	f
mlx_set_font	lib/minilibx-linux/mlx_set_font.c	/^void	mlx_set_font(t_xvar *xvar, t_win_list *win, char *name)$/;"	f
mlx_string_put	lib/minilibx-linux/mlx_string_put.c	/^int		mlx_string_put(t_xvar *xvar,t_win_list *win,$/;"	f
mlx_xpm_file_to_image	lib/minilibx-linux/mlx_lib_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *filename,$/;"	f
mlx_xpm_file_to_image	lib/minilibx-linux/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	lib/minilibx-linux/mlx_lib_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **data,int *width,int *height)$/;"	f
mlx_xpm_to_image	lib/minilibx-linux/mlx_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **xpm_data,int *width,int *height)$/;"	f
mouse_hook	lib/minilibx-linux/mlx_int.h	/^	int					(*mouse_hook)();$/;"	m	struct:s_win_list
mouse_param	lib/minilibx-linux/mlx_int.h	/^	void				*mouse_param;$/;"	m	struct:s_win_list
mouse_win1	lib/minilibx-linux/test/main.c	/^int	mouse_win1(int button,int x,int y, void *p)$/;"	f
mouse_win2	lib/minilibx-linux/test/main.c	/^int	mouse_win2(int button,int x,int y, void *p)$/;"	f
mouse_win3	lib/minilibx-linux/test/main.c	/^int	mouse_win3(int x,int y, void *p)$/;"	f
move_player	src/update.c	/^static void	move_player(t_player *player, char **map)$/;"	f	file:
multi_free	lib/libft/myfunc/multi_free.c	/^void	multi_free(char *str1, char *str2, char *str3, char *str4)$/;"	f
my_mlx_pixel_put	src/my_mlx_pixel_put.c	/^void	my_mlx_pixel_put(t_img *img, int x, int y, int color)$/;"	f
name	lib/minilibx-linux/mlx_int.h	/^	char	*name;$/;"	m	struct:s_col_name
name	lib/minilibx-linux/mlx_int.h	/^	int		name;$/;"	m	struct:s_xpm_col
next	lib/libft/myfunc/clst.h	/^	struct s_clst	*next;$/;"	m	struct:s_clst	typeref:struct:s_clst::s_clst
next	lib/libft/myfunc/dict.h	/^	struct s_dict	*next;$/;"	m	struct:s_dict	typeref:struct:s_dict::s_dict
next	lib/libft/subject/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	lib/minilibx-linux/mlx_int.h	/^	struct s_win_list	*next;$/;"	m	struct:s_win_list	typeref:struct:s_win_list::s_win_list
normalize_angle	src/raycast/cast_all_rays.c	/^static double normalize_angle(double ray_angle) {$/;"	f	file:
param	lib/minilibx-linux/mlx_int.h	/^	void	*param;$/;"	m	struct:s_event_list
parse_args	lib/minilibx-linux/configure	/^parse_args(){$/;"	f
pix	lib/minilibx-linux/mlx_int.h	/^	Pixmap			pix;$/;"	m	struct:s_img
player	inc/minimap.h	/^  t_player player;$/;"	m	struct:s_game
position	inc/minimap.h	/^  t_point position;$/;"	m	struct:s_player
prev	lib/libft/myfunc/clst.h	/^	struct s_clst	*prev;$/;"	m	struct:s_clst	typeref:struct:s_clst::s_clst
prev	lib/libft/myfunc/dict.h	/^	struct s_dict	*prev;$/;"	m	struct:s_dict	typeref:struct:s_dict::s_dict
private_cmap	lib/minilibx-linux/mlx_int.h	/^	int			private_cmap;$/;"	m	struct:s_xvar
process_key_press	src/process_key_press.c	/^void	process_key_press(int keycode, t_player *player)$/;"	f
process_move_key	src/process_key_press.c	/^static void	process_move_key(int keycode, t_player *player)$/;"	f	file:
process_rotate_key	src/process_key_press.c	/^static void	process_rotate_key(int keycode, t_player *player)$/;"	f	file:
pshm_format	lib/minilibx-linux/mlx_int.h	/^	int			pshm_format;$/;"	m	struct:s_xvar
radius	inc/minimap.h	/^  double radius;$/;"	m	struct:s_player
ray	inc/minimap.h	/^  t_ray *ray;$/;"	m	struct:s_game
register_hooks	src/register_hooks.c	/^void	register_hooks(t_game *game)$/;"	f
render	src/render/render.c	/^int	render(t_game *game)$/;"	f
render_3d_ceil	src/render/render_3d_projection.c	/^static void	render_3d_ceil(t_img *win_img)$/;"	f	file:
render_3d_floor	src/render/render_3d_projection.c	/^static void	render_3d_floor(t_img *win_img)$/;"	f	file:
render_3d_projection	src/render/render_3d_projection.c	/^void	render_3d_projection(t_player *player, t_ray *ray, t_img *win_img)$/;"	f
render_3d_wall	src/render/render_3d_wall.c	/^void	render_3d_wall(t_player *player, t_ray *ray, t_img *win_img)$/;"	f
render_all_rays	src/render/render.c	/^static void	render_all_rays(t_player *player, t_ray *ray, t_img *win_img)$/;"	f	file:
render_map	src/render/render_map.c	/^void	render_map(t_map *map, t_img *win_img)$/;"	f
render_minimap	src/render/render.c	/^static void	render_minimap(t_map *map, t_player *player, t_ray *ray, t_img *win_img)$/;"	f	file:
render_player	src/render/render.c	/^static void	render_player(const t_player *player, t_img *win_img)$/;"	f	file:
render_ray	src/render/render.c	/^static void	render_ray(const t_point *player_pos, double ray_distance, \\$/;"	f	file:
render_tile	src/render/render_map.c	/^static void	render_tile(t_img *win_img, int x, int y, int color)$/;"	f	file:
render_wall_strip	src/render/render_3d_wall.c	/^static void	render_wall_strip(t_img *win_img, int x, double wall_strip_height, \\$/;"	f	file:
reset_for_error	lib/libft/gnl/get_next_line_before.c	/^static int	reset_for_error(char **line, char **left, char *buf)$/;"	f	file:
root	lib/minilibx-linux/mlx_int.h	/^	Window		root;$/;"	m	struct:s_xvar
rotation_angle	inc/minimap.h	/^  double rotation_angle;$/;"	m	struct:s_player
s_clst	lib/libft/myfunc/clst.h	/^typedef struct s_clst$/;"	s
s_col_name	lib/minilibx-linux/mlx_int.h	/^struct	s_col_name$/;"	s
s_dict	lib/libft/myfunc/dict.h	/^typedef struct s_dict$/;"	s
s_event_list	lib/minilibx-linux/mlx_int.h	/^typedef struct	s_event_list$/;"	s
s_game	inc/minimap.h	/^typedef struct s_game {$/;"	s
s_img	inc/minimap.h	/^typedef struct s_img {$/;"	s
s_img	lib/minilibx-linux/mlx_int.h	/^typedef struct	s_img$/;"	s
s_list	lib/libft/subject/libft.h	/^typedef struct s_list$/;"	s
s_player	inc/minimap.h	/^typedef struct s_player {$/;"	s
s_point	inc/minimap.h	/^typedef struct s_point {$/;"	s
s_ray	inc/minimap.h	/^typedef struct s_ray {$/;"	s
s_win_list	lib/minilibx-linux/mlx_int.h	/^typedef struct	s_win_list$/;"	s
s_xpm_col	lib/minilibx-linux/mlx_int.h	/^typedef	struct	s_xpm_col$/;"	s
s_xvar	lib/minilibx-linux/mlx_int.h	/^typedef struct	s_xvar$/;"	s
saved_mode	lib/minilibx-linux/mlx_ext_randr.c	/^RRMode	saved_mode = 0;$/;"	v
screen	lib/minilibx-linux/mlx_int.h	/^	int			screen;$/;"	m	struct:s_xvar
set_closer_intersection	src/raycast/set_closer_intersection.c	/^void	set_closer_intersection(t_ray *ray, const t_point *horiz_intersection,$/;"	f
set_nbr	lib/libft/myfunc/ft_xitoa.c	/^static char	*set_nbr(char *str, long l_nbr, long digit)$/;"	f	file:
set_nbr	lib/libft/subject/ft_itoa.c	/^static char	*set_nbr(char *str, long l_nbr, long digit)$/;"	f	file:
set_ray_is_facing_to	src/raycast/cast_all_rays.c	/^static void set_ray_is_facing_to(t_ray *ray, double ray_angle) {$/;"	f	file:
set_return_ssize_t	lib/libft/gnl/get_next_line_before.c	/^static ssize_t	set_return_ssize_t(ssize_t *cnt, ssize_t read)$/;"	f	file:
set_return_str	lib/libft/gnl/get_next_line_before.c	/^static char	*set_return_str(char **str1, char *str2)$/;"	f	file:
set_strings_from_list	lib/libft/myfunc/to_vector.c	/^static char	**set_strings_from_list(t_list *head)$/;"	f	file:
shm	lib/minilibx-linux/mlx_int.h	/^	XShmSegmentInfo	shm;$/;"	m	struct:s_img
shm_att_pb	lib/minilibx-linux/mlx_new_image.c	/^int	shm_att_pb(Display *d,XErrorEvent *ev)$/;"	f
should_move	inc/minimap.h	/^  bool	should_move;$/;"	m	struct:s_player
show_help	lib/minilibx-linux/configure	/^show_help(){$/;"	f
show_is_facing_to	src/raycast/cast_all_rays.c	/^void show_is_facing_to(t_ray *ray) {$/;"	f
sigint_handler	lib/minilibx-linux/test/run_tests.sh	/^sigint_handler(){$/;"	f
size_line	inc/minimap.h	/^  int size_line;$/;"	m	struct:s_img
size_line	lib/minilibx-linux/mlx_int.h	/^	int				size_line;$/;"	m	struct:s_img
sl1	lib/minilibx-linux/test/main.c	/^int	sl1;$/;"	v
sl2	lib/minilibx-linux/test/main.c	/^int	sl2;$/;"	v
sl3	lib/minilibx-linux/test/main.c	/^int	sl3;$/;"	v
sl4	lib/minilibx-linux/test/main.c	/^int	sl4;$/;"	v
strlcpy_is_not_posix	lib/minilibx-linux/mlx_xpm.c	/^unsigned int	strlcpy_is_not_posix(char *dest, char *src, unsigned int size)$/;"	f
t_clst	lib/libft/myfunc/clst.h	/^}		t_clst;$/;"	t	typeref:struct:s_clst
t_dict	lib/libft/myfunc/dict.h	/^}				t_dict;$/;"	t	typeref:struct:s_dict
t_event_list	lib/minilibx-linux/mlx_int.h	/^}				t_event_list;$/;"	t	typeref:struct:s_event_list
t_game	inc/minimap.h	/^} t_game;$/;"	t	typeref:struct:s_game
t_img	inc/minimap.h	/^} t_img;$/;"	t	typeref:struct:s_img
t_img	lib/minilibx-linux/mlx_int.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_list	lib/libft/subject/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_player	inc/minimap.h	/^} t_player;$/;"	t	typeref:struct:s_player
t_point	inc/minimap.h	/^} t_point;$/;"	t	typeref:struct:s_point
t_ray	inc/minimap.h	/^} t_ray;$/;"	t	typeref:struct:s_ray
t_win_list	lib/minilibx-linux/mlx_int.h	/^}				t_win_list;$/;"	t	typeref:struct:s_win_list
t_xpm_col	lib/minilibx-linux/mlx_int.h	/^}				t_xpm_col;$/;"	t	typeref:struct:s_xpm_col
t_xvar	lib/minilibx-linux/mlx_int.h	/^}				t_xvar;$/;"	t	typeref:struct:s_xvar
test_default_main	lib/minilibx-linux/test/run_tests.sh	/^test_default_main(){$/;"	f
to_vector	lib/libft/myfunc/to_vector.c	/^char	**to_vector(int fd)$/;"	f
turn_speed	inc/minimap.h	/^  double turn_speed;$/;"	m	struct:s_player
type	lib/minilibx-linux/mlx_int.h	/^	int				type;$/;"	m	struct:s_img
update	src/update.c	/^void	update(t_game *game)$/;"	f
use_xshm	lib/minilibx-linux/mlx_int.h	/^	int			use_xshm;$/;"	m	struct:s_xvar
value	lib/libft/myfunc/dict.h	/^	char			*value;$/;"	m	struct:s_dict
visual	lib/minilibx-linux/mlx_int.h	/^	Visual		*visual;$/;"	m	struct:s_xvar
walk_direction	inc/minimap.h	/^  double walk_direction; \/\/ 0 is forward, M_PI is back$/;"	m	struct:s_player
walk_speed	inc/minimap.h	/^  int walk_speed;$/;"	m	struct:s_player
wall_hit	inc/minimap.h	/^  t_point wall_hit;$/;"	m	struct:s_ray
wall_hit_content	inc/minimap.h	/^  int wall_hit_content; \/\/ need check$/;"	m	struct:s_ray
was_hit_vertical	inc/minimap.h	/^  bool was_hit_vertical;$/;"	m	struct:s_ray
width	lib/minilibx-linux/mlx_int.h	/^	int				width;$/;"	m	struct:s_img
win1	lib/minilibx-linux/test/main.c	/^void	*win1;$/;"	v
win1	lib/minilibx-linux/test/new_win.c	/^void *win1;$/;"	v
win2	lib/minilibx-linux/test/main.c	/^void    *win2;$/;"	v
win2	lib/minilibx-linux/test/new_win.c	/^void *win2;$/;"	v
win3	lib/minilibx-linux/test/main.c	/^void    *win3;$/;"	v
win_count	lib/minilibx-linux/mlx_loop.c	/^static int	win_count(t_xvar *xvar)$/;"	f	file:
win_list	lib/minilibx-linux/mlx_int.h	/^	t_win_list	*win_list;$/;"	m	struct:s_xvar
win_ptr	inc/minimap.h	/^  void *win_ptr;$/;"	m	struct:s_game
window	lib/minilibx-linux/mlx_int.h	/^	Window				window;$/;"	m	struct:s_win_list
wm_delete_window	lib/minilibx-linux/mlx_int.h	/^	Atom		wm_delete_window;$/;"	m	struct:s_xvar
wm_protocols	lib/minilibx-linux/mlx_int.h	/^	Atom		wm_protocols;$/;"	m	struct:s_xvar
x	inc/minimap.h	/^  double x;$/;"	m	struct:s_point
xclose	lib/libft/myfunc/xclose.c	/^void	xclose(int fd)$/;"	f
xdict_new	lib/libft/myfunc/xdict_new.c	/^t_dict	*xdict_new(char *key, char *value)$/;"	f
xdict_to_array	lib/libft/myfunc/xdict_to_array.c	/^char	**xdict_to_array(t_dict *dict_head, char *connector)$/;"	f
xdup	lib/libft/myfunc/xdup.c	/^int	xdup(int fd)$/;"	f
xdup2	lib/libft/myfunc/xdup2.c	/^void	xdup2(int fd1, int fd2)$/;"	f
xfork	lib/libft/myfunc/xfork.c	/^pid_t	xfork(void)$/;"	f
xmalloc	lib/libft/myfunc/xmalloc.c	/^void	*xmalloc(size_t size)$/;"	f
xperror	lib/libft/myfunc/xperror.c	/^void	xperror(char *s)$/;"	f
xpipe	lib/libft/myfunc/xpipe.c	/^void	xpipe(int *fd)$/;"	f
xpm1_x	lib/minilibx-linux/test/main.c	/^int	xpm1_x;$/;"	v
xpm1_y	lib/minilibx-linux/test/main.c	/^int	xpm1_y;$/;"	v
xwaitpid	lib/libft/myfunc/xwaitpid.c	/^void	xwaitpid(pid_t pid, int *status, int options)$/;"	f
y	inc/minimap.h	/^  double y;$/;"	m	struct:s_point
